//c++代码
class Solution {
public:
    bool canThreePartsEqualSum(vector<int>& A) {
            int sum = 0;
            for (int& a : A) {
                    sum += a;
            }
            if (sum % 3 != 0) {
                    return false;
            }
            
            int val = sum / 3;
            int i = 0;
            int s1= 0;
            for (i = 0; i < A.size(); i++) {
                    s1 += A[i];
                    if (s1 == val) { break; }
            }
            if (i == A.size()) { return false; }
            
            int j = 0;
            int s2 = 0;
            for (j = i+1; j < A.size(); j++) {
                    s2 += A[j];
                    if (s2 == val) { break; }
            }
            if (j == A.size()) { return false; }
            
            int k = 0;
            int s3 = 0;
            for (k = j+1; k < A.size(); k++) {
                    s3 += A[k];
            }
            if (s3 != val) { return false; }
            
            return true;
    }
};

//golang代码
func canThreePartsEqualSum(A []int) bool {
        sum := 0;
        for _, v := range A {
                sum += v;
        }
        if sum % 3 != 0 {
                return false;
        }
        
        val := sum / 3;
        i, s1 := 0, 0;
        for i = 0; i < len(A); i++ {
                s1 += A[i];
                if s1 == val {
                        break;
                }
        }
        if i == len(A) {
                return false;
        }
        
        j, s2 := 0,0;
        for j = i+1; j < len(A); j++ {
                s2 += A[j];
                if s2 == val {
                        break;
                }
        }
        if j == len(A) {
                return false;
        }
        
        k, s3 := 0, 0;
        for k = j + 1; k < len(A); k++ {
                s3 += A[k];
        }
        if s3 != val {
                return false;
        }
        
        return true;
}
